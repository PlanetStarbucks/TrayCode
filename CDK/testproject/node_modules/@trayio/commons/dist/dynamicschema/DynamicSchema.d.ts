import * as E from 'fp-ts/Either';
import * as t from 'io-ts';
import { DynamicObject } from '../dynamictype/DynamicType';
declare const dynamicSchemaTypeDescriptor: t.BrandC<t.Type<DynamicObject, DynamicObject, unknown>, DynamicSchemaBrand>;
export type DynamicSchema = t.TypeOf<typeof dynamicSchemaTypeDescriptor>;
export interface DynamicSchemaBrand {
    readonly DynamicSchema: unique symbol;
}
export interface DynamicSchemaInterface {
    fromDynamicObject: (schemaObj: DynamicObject) => E.Either<Error, DynamicSchema>;
    validate: (schema: DynamicSchema, value: DynamicObject) => E.Either<Error, undefined>;
}
export declare const DynamicSchema: DynamicSchemaInterface;
export {};
//# sourceMappingURL=DynamicSchema.d.ts.map