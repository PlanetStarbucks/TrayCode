"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const E = __importStar(require("fp-ts/Either"));
const DynamicSchema_1 = require("./DynamicSchema");
describe('DynamicSchema', () => {
    let validSchema;
    let invalidSchema;
    let value;
    beforeEach(() => {
        validSchema = {
            type: 'object',
            properties: {
                name: {
                    type: 'string',
                },
                age: {
                    type: 'number',
                },
            },
            required: ['name', 'age'],
        };
        invalidSchema = {
            type: 'invalidType',
            properties: {
                name: {
                    type: 'string',
                },
                age: {
                    type: 'number',
                },
            },
            required: ['name', 'age'],
        };
        value = {
            name: 'John Doe',
            age: 30,
        };
    });
    describe('fromDynamicObject', () => {
        it('should return a Right DynamicSchema when given a valid schema object', () => {
            const result = DynamicSchema_1.DynamicSchema.fromDynamicObject(validSchema);
            expect(E.isRight(result)).toBe(true);
            if (E.isRight(result)) {
                expect(result.right).toEqual(validSchema);
            }
        });
        it('should return a Left Error when given an invalid schema object', () => {
            const result = DynamicSchema_1.DynamicSchema.fromDynamicObject(invalidSchema);
            expect(E.isLeft(result)).toBe(true);
            if (E.isLeft(result)) {
                expect(result.left).toBeInstanceOf(Error);
                expect(result.left.message).toContain('Failed to create DynamicSchema:');
            }
        });
    });
    describe('validate', () => {
        it('should return a Right undefined when the value matches the schema', () => {
            const schema = DynamicSchema_1.DynamicSchema.fromDynamicObject(validSchema);
            if (E.isRight(schema)) {
                const result = DynamicSchema_1.DynamicSchema.validate(schema.right, value);
                expect(E.isRight(result)).toBe(true);
                if (E.isRight(result)) {
                    expect(result.right).toBeUndefined();
                }
            }
        });
        it('should return a Left Error when the value does not match the schema', () => {
            const schema = DynamicSchema_1.DynamicSchema.fromDynamicObject(validSchema);
            if (E.isRight(schema)) {
                const result = DynamicSchema_1.DynamicSchema.validate(schema.right, invalidSchema);
                expect(E.isLeft(result)).toBe(true);
                if (E.isLeft(result)) {
                    expect(result.left).toBeInstanceOf(Error);
                }
            }
        });
    });
});
