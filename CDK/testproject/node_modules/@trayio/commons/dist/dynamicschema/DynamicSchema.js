"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DynamicSchema = void 0;
const ajv_draft_04_1 = __importDefault(require("ajv-draft-04"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const E = __importStar(require("fp-ts/Either"));
const t = __importStar(require("io-ts"));
const function_1 = require("fp-ts/function");
const DynamicType_1 = require("../dynamictype/DynamicType");
const TypeCodec_1 = require("../codec/TypeCodec");
const ajv = new ajv_draft_04_1.default();
/*
    We define additional formats for the JSON schema
    See: https://ajv.js.org/packages/ajv-formats.html#formats
*/
(0, ajv_formats_1.default)(ajv);
const isDynamicSchema = (o) => {
    try {
        ajv.compile(o);
        return true;
    }
    catch (error) {
        return false;
    }
};
const dynamicSchemaTypeDescriptor = t.brand(DynamicType_1.dynamicObjectTypeDescriptor, (input) => isDynamicSchema(input), 'DynamicSchema');
const dynamicSchemaTypeCodec = TypeCodec_1.TypeCodec.fromDescriptor(dynamicSchemaTypeDescriptor);
exports.DynamicSchema = {
    fromDynamicObject: (schemaObj) => (0, function_1.pipe)(dynamicSchemaTypeCodec.decode(schemaObj), E.mapLeft((e) => new Error(`Failed to create DynamicSchema: ${e}`))),
    validate: (schema, value) => {
        const validate = ajv.compile(schema);
        if (validate(value)) {
            return E.right(undefined);
        }
        return E.left(new Error(ajv.errorsText(validate.errors)));
    },
};
